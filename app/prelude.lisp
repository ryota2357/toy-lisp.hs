(defun print (x)
  (terpri)
  (princ x))

(defun terpri ()
  (princ "
"))

(defun not (x)
  (eq x nil))

(defun null (x)
  (eq x nil))

(defun atom (x)
  (or (eq x nil)
      (not (eq (type-of x) 'list))))

(defun listp (x)
  (or (null x)
      (eq (type-of x) 'list)))

; 1st ~ 10th
(defun first   (lst) (car lst))
(defun second  (lst) (car (cdr lst)))
(defun third   (lst) (car (nthcdr 2 lst)))
(defun fourth  (lst) (car (nthcdr 3 lst)))
(defun fifth   (lst) (car (nthcdr 4 lst)))
(defun sixth   (lst) (car (nthcdr 5 lst)))
(defun seventh (lst) (car (nthcdr 6 lst)))
(defun eighth  (lst) (car (nthcdr 7 lst)))
(defun ninth   (lst) (car (nthcdr 8 lst)))
(defun tenth   (lst) (car (nthcdr 9 lst)))

(defun nth (n lst)
  (car (nthcdr n lst)))

(defun rest (lst)
  (cdr lst))

(defun last (lst)
  (if (null (cdr lst))
      (car lst)
      (last (cdr lst))))

(defun caar (lst) (car (car lst)))
(defun cadr (lst) (car (cdr lst)))
(defun cdar (lst) (cdr (car lst)))
(defun cddr (lst) (cdr (cdr lst)))
(defun caaar (lst) (car (car (car lst))))
(defun caadr (lst) (car (car (cdr lst))))
(defun cadar (lst) (car (cdr (car lst))))
(defun caddr (lst) (car (cdr (cdr lst))))
(defun cdaar (lst) (cdr (car (car lst))))
(defun cdadr (lst) (cdr (car (cdr lst))))
(defun cddar (lst) (cdr (cdr (car lst))))
(defun cdddr (lst) (cdr (cdr (cdr lst))))
(defun caaaar (lst) (car (car (car (car lst)))))
(defun caaadr (lst) (car (car (car (cdr lst)))))
(defun caadar (lst) (car (car (cdr (car lst)))))
(defun caaddr (lst) (car (car (cdr (cdr lst)))))
(defun cadaar (lst) (car (cdr (car (car lst)))))
(defun cadadr (lst) (car (cdr (car (cdr lst)))))
(defun caddar (lst) (car (cdr (cdr (car lst)))))
(defun cadddr (lst) (car (cdr (cdr (cdr lst)))))
(defun cdaaar (lst) (cdr (car (car (car lst)))))
(defun cdaadr (lst) (cdr (car (car (cdr lst)))))
(defun cdadar (lst) (cdr (car (cdr (car lst)))))
(defun cdaddr (lst) (cdr (car (cdr (cdr lst)))))
(defun cddaar (lst) (cdr (cdr (car (car lst)))))
(defun cddadr (lst) (cdr (cdr (car (cdr lst)))))
(defun cdddar (lst) (cdr (cdr (cdr (car lst)))))
(defun cddddr (lst) (cdr (cdr (cdr (cdr lst)))))
